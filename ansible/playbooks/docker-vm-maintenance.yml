---
# Docker VM Maintenance Playbook
# Target: PCT-111 (192.168.1.20) - docker-debian on pve2
# Purpose: Comprehensive Docker host maintenance including thin pool management
# Schedule: Weekly full maintenance, monthly comprehensive with fstrim
# Critical: fstrim is ESSENTIAL for LVM thin pool space reclamation

- name: Docker VM Maintenance
  hosts: docker-vm
  become: yes

  vars:
    maintenance_log: "/var/log/ansible-docker-maintenance.log"
    log_retention_days: 7
    docker_log_max_size: "100m"
    journal_max_size: "500M"

  tasks:
    # ========================================
    # MAINTENANCE INITIALIZATION
    # ========================================

    - name: Create maintenance log entry
      lineinfile:
        path: "{{ maintenance_log }}"
        line: "=== Docker VM maintenance started: {{ ansible_date_time.iso8601 }} ==="
        create: yes
      tags: always

    - name: Check disk usage before maintenance
      shell: df -h / | tail -1
      register: disk_usage_before
      changed_when: false
      tags: always

    - name: Check LVM thin pool usage before maintenance
      shell: lvs pve/data -o lv_name,data_percent,metadata_percent --noheadings
      register: lvm_before
      changed_when: false
      delegate_to: 192.168.1.10
      tags: always

    # ========================================
    # SYSTEMD JOURNAL CLEANUP (Critical!)
    # ========================================

    - name: Rotate and clean system journals
      shell: journalctl --vacuum-time={{ log_retention_days }}d
      register: journal_cleanup
      tags: logs

    - name: Permanently configure journal size limit
      lineinfile:
        path: /etc/systemd/journald.conf
        regexp: '^#?SystemMaxUse='
        line: 'SystemMaxUse={{ journal_max_size }}'
        state: present
      notify: restart journald
      tags: logs

    - name: Configure journal retention time
      lineinfile:
        path: /etc/systemd/journald.conf
        regexp: '^#?MaxRetentionSec='
        line: 'MaxRetentionSec={{ log_retention_days }}day'
        state: present
      notify: restart journald
      tags: logs

    # ========================================
    # DOCKER LOG CLEANUP
    # ========================================

    - name: Get Docker container logs size
      shell: |
        for container in $(docker ps -q); do
          log_file=$(docker inspect --format='{{ "{{" }}.LogPath{{ "}}" }}' $container)
          if [ -f "$log_file" ]; then
            du -sh "$log_file"
          fi
        done
      register: docker_logs_before
      changed_when: false
      tags: logs

    - name: Truncate large Docker container logs (>100MB)
      shell: |
        for container in $(docker ps -q); do
          log_file=$(docker inspect --format='{{ "{{" }}.LogPath{{ "}}" }}' $container)
          if [ -f "$log_file" ]; then
            size=$(stat -f%z "$log_file" 2>/dev/null || stat -c%s "$log_file" 2>/dev/null || echo 0)
            if [ $size -gt 104857600 ]; then
              truncate -s 50M "$log_file"
              echo "Truncated $log_file"
            fi
          fi
        done
      register: docker_log_truncate
      changed_when: docker_log_truncate.stdout != ""
      tags: logs

    # ========================================
    # DOCKER SYSTEM CLEANUP
    # ========================================

    - name: Get Docker disk usage before cleanup
      shell: docker system df
      register: docker_df_before
      changed_when: false
      tags: docker

    - name: Remove stopped containers
      shell: docker container prune -f
      register: container_prune
      tags: docker

    - name: Remove dangling images
      shell: docker image prune -f
      register: image_prune
      tags: docker

    - name: Remove unused volumes (comprehensive mode only)
      shell: docker volume prune -f
      register: volume_prune
      when: comprehensive_maintenance is defined and comprehensive_maintenance | bool
      tags: docker,comprehensive

    - name: Remove unused networks
      shell: docker network prune -f
      register: network_prune
      tags: docker

    - name: Remove build cache (comprehensive mode only)
      shell: docker builder prune -af
      register: builder_prune
      when: comprehensive_maintenance is defined and comprehensive_maintenance | bool
      tags: docker,comprehensive

    - name: Get Docker disk usage after cleanup
      shell: docker system df
      register: docker_df_after
      changed_when: false
      tags: docker

    # ========================================
    # CRITICAL: FSTRIM FOR THIN POOL
    # THIS IS THE MOST IMPORTANT TASK!
    # Without fstrim, thin pools NEVER reclaim space
    # ========================================

    - name: Run fstrim to reclaim thin pool space
      shell: fstrim -v /
      register: fstrim_result
      changed_when: fstrim_result.stdout is search('trimmed')
      tags: fstrim,always

    - name: Log fstrim results
      debug:
        msg: "fstrim completed: {{ fstrim_result.stdout }}"
      when: fstrim_result is defined
      tags: fstrim

    # ========================================
    # SYSTEM PACKAGE UPDATES
    # ========================================

    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
      tags: updates

    - name: Upgrade all packages (dist-upgrade)
      apt:
        upgrade: dist
        autoremove: yes
        autoclean: yes
      register: apt_updates
      tags: updates

    - name: Check if reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required
      tags: updates

    # ========================================
    # DOCKER HEALTH CHECKS
    # ========================================

    - name: Check Docker service status
      systemd:
        name: docker
        state: started
        enabled: yes
      tags: health

    - name: Get Docker container health status
      shell: docker ps --format "table {{ "{{" }}.Names{{ "}}" }}\t{{ "{{" }}.Status{{ "}}" }}" | grep -E "(unhealthy|restarting)" || true
      register: unhealthy_containers
      changed_when: false
      tags: health

    - name: Check Docker daemon info
      shell: docker info --format '{{ "{{" }}.DriverStatus{{ "}}" }}'
      register: docker_info
      changed_when: false
      tags: health

    # ========================================
    # CRITICAL CONTAINER CHECKS
    # ========================================

    - name: Check Netdata container status
      shell: docker ps --filter name=netdata --format "{{ "{{" }}.Status{{ "}}" }}"
      register: netdata_status
      changed_when: false
      ignore_errors: yes
      tags: health

    - name: Verify critical containers are running
      shell: |
        containers="netdata pihole supabase n8n"
        for container in $containers; do
          if docker ps | grep -q $container; then
            echo "$container: running"
          else
            echo "$container: NOT RUNNING"
          fi
        done
      register: critical_containers
      changed_when: false
      tags: health

    # ========================================
    # POST-MAINTENANCE ASSESSMENT
    # ========================================

    - name: Check disk usage after maintenance
      shell: df -h / | tail -1
      register: disk_usage_after
      changed_when: false
      tags: always

    - name: Check LVM thin pool usage after maintenance
      shell: lvs pve/data -o lv_name,data_percent,metadata_percent --noheadings
      register: lvm_after
      changed_when: false
      delegate_to: 192.168.1.10
      tags: always

    - name: Calculate space freed
      shell: |
        before=$(echo "{{ disk_usage_before.stdout }}" | awk '{print $3}' | sed 's/G//')
        after=$(echo "{{ disk_usage_after.stdout }}" | awk '{print $3}' | sed 's/G//')
        freed=$(echo "$before - $after" | bc)
        echo "${freed}G freed"
      register: space_freed
      changed_when: false
      tags: always

    # ========================================
    # COMPREHENSIVE MAINTENANCE (MONTHLY)
    # ========================================

    - name: Deep Docker cleanup (comprehensive mode)
      shell: docker system prune -af --volumes
      register: deep_docker_prune
      when: comprehensive_maintenance is defined and comprehensive_maintenance | bool
      tags: comprehensive

    - name: Clean old backup files in /root
      find:
        paths: /root
        patterns: "*.tar.gz,*.tar,*.backup,*.bak"
        age: "90d"
        size: "100m"
      register: old_backups
      when: comprehensive_maintenance is defined and comprehensive_maintenance | bool
      tags: comprehensive

    - name: Remove old large backup files
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ old_backups.files }}"
      when:
        - comprehensive_maintenance is defined and comprehensive_maintenance | bool
        - old_backups.matched > 0
      tags: comprehensive

    - name: Verify fstrim is scheduled
      cron:
        name: "Weekly fstrim for thin pool"
        minute: "0"
        hour: "2"
        weekday: "0"
        job: "/sbin/fstrim -v / >> /var/log/fstrim.log 2>&1"
        user: root
        state: present
      when: comprehensive_maintenance is defined and comprehensive_maintenance | bool
      tags: comprehensive

    # ========================================
    # MAINTENANCE REPORTING
    # ========================================

    - name: Log maintenance results
      blockinfile:
        path: "{{ maintenance_log }}"
        marker: "<!-- {mark} ANSIBLE MANAGED BLOCK {{ ansible_date_time.iso8601 }} -->"
        block: |
          Maintenance Summary:
          - Date: {{ ansible_date_time.iso8601 }}
          - Disk Usage Before: {{ disk_usage_before.stdout }}
          - Disk Usage After: {{ disk_usage_after.stdout }}
          - Space Freed: {{ space_freed.stdout }}
          - LVM Thin Pool Before: {{ lvm_before.stdout }}
          - LVM Thin Pool After: {{ lvm_after.stdout }}
          - fstrim Result: {{ fstrim_result.stdout | default('Not run') }}
          - System Updates: {{ apt_updates.changed | default(false) }}
          - Journal Cleaned: {{ journal_cleanup.changed | default(false) }}
          - Docker Containers Pruned: {{ container_prune.changed | default(false) }}
          - Docker Images Pruned: {{ image_prune.changed | default(false) }}
          - Unhealthy Containers: {{ unhealthy_containers.stdout | default('None') }}
          - Reboot Required: {{ 'YES' if (reboot_required is defined and reboot_required.stat.exists) else 'NO' }}
          {% if comprehensive_maintenance is defined and comprehensive_maintenance | bool %}
          - Deep Docker Cleanup: Yes
          - Old Backups Removed: {{ old_backups.matched | default(0) }} files
          - fstrim Schedule: Verified
          {% endif %}
      tags: always

    - name: Send maintenance summary
      debug:
        msg: |
          ============================================
          Docker VM Maintenance Summary
          ============================================
          Host: {{ ansible_hostname }}
          Date: {{ ansible_date_time.iso8601 }}

          DISK USAGE:
          Before: {{ disk_usage_before.stdout }}
          After:  {{ disk_usage_after.stdout }}
          Space Freed: {{ space_freed.stdout }}

          LVM THIN POOL:
          Before: {{ lvm_before.stdout }}
          After:  {{ lvm_after.stdout }}

          FSTRIM (CRITICAL!):
          Result: {{ fstrim_result.stdout | default('Not run') }}

          SYSTEM UPDATES:
          Updates Applied: {{ apt_updates.changed | default(false) }}
          Reboot Required: {{ 'YES - MANUAL REBOOT NEEDED' if (reboot_required is defined and reboot_required.stat.exists) else 'NO' }}

          LOG CLEANUP:
          System Journals: {{ journal_cleanup.changed | default(false) }}
          Docker Logs: {{ docker_log_truncate.changed | default(false) }}

          DOCKER CLEANUP:
          Containers Pruned: {{ container_prune.changed | default(false) }}
          Images Pruned: {{ image_prune.changed | default(false) }}
          {% if volume_prune is defined %}
          Volumes Pruned: {{ volume_prune.changed | default(false) }}
          {% endif %}
          {% if builder_prune is defined %}
          Builder Cache Pruned: {{ builder_prune.changed | default(false) }}
          {% endif %}

          DOCKER STATUS:
          {% if docker_df_before is defined %}
          Disk Usage Before:
          {{ docker_df_before.stdout }}
          {% endif %}

          {% if docker_df_after is defined %}
          Disk Usage After:
          {{ docker_df_after.stdout }}
          {% endif %}

          CONTAINER HEALTH:
          Unhealthy: {{ unhealthy_containers.stdout | default('None') }}
          Netdata: {{ netdata_status.stdout | default('Unknown') }}
          {% if critical_containers is defined %}
          Critical Containers:
          {{ critical_containers.stdout }}
          {% endif %}

          {% if comprehensive_maintenance is defined and comprehensive_maintenance | bool %}
          COMPREHENSIVE MAINTENANCE:
          Deep Docker Cleanup: Yes
          Old Backups Removed: {{ old_backups.matched | default(0) }} files
          fstrim Cron: Verified
          {% endif %}

          ⚠️  IMPORTANT: fstrim is CRITICAL for thin pool health!
          Without fstrim, deleted files never free thin pool space.

          ============================================
      tags: always

    - name: Create maintenance completion marker
      lineinfile:
        path: "{{ maintenance_log }}"
        line: "=== Docker VM maintenance completed successfully: {{ ansible_date_time.iso8601 }} ==="
      tags: always

  # ========================================
  # HANDLERS
  # ========================================

  handlers:
    - name: restart journald
      systemd:
        name: systemd-journald
        state: restarted
